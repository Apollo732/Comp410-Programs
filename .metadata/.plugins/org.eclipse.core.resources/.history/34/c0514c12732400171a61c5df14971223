package DiGraph_A5;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
public class DiGraph implements DiGraphInterface {

	// in here go all your data and methods for the graph
	// and the topo sort operation
	private HashMap<String, Node> nodes;
	private HashMap<String,String> id;
	long numNodes,numEdges;
	public DiGraph ( ) { 
	  nodes=new HashMap<String,Node>();
	  id=new HashMap<String,String>();
	  numNodes=0;
	  numEdges=0;
	}
	public boolean addNode(long idNum,String label){
		if(idNum>=0&&!nodes.containsKey(label)){
			
				if(id.containsKey(Long.toString(idNum))){
					return false;
				}
			nodes.put(label, new Node(idNum,label));
			id.put(Long.toString(idNum),Long.toString(idNum));
			numNodes++;
			return true;
		}
		return false;
	}
	public boolean addEdge(long idNum,String sLabel,String dLabel, long weight,String eLabel){
		if(idNum>=0&&nodes.containsKey(sLabel)&&nodes.containsKey(dLabel)){
			if(!nodes.get(sLabel).getEdges().containsKey(dLabel)&&!nodes.get(sLabel).getIds().contains(Long.toString(idNum))){
				nodes.get(sLabel).getEdges().put(dLabel, new Edge(idNum,sLabel,dLabel,eLabel,weight));
				nodes.get(sLabel).getIds().add(Long.toString(idNum));
				nodes.get(dLabel).incrementInEdges();
				numEdges++;
				return true;
			}
		}
		return false;
	}
	public boolean delNode(String label){
		if(nodes.containsKey(label)){
			for(String s:nodes.get(label).getEdges().keySet()){
				nodes.get(s).decrementInEdges();
			}
			numEdges-=nodes.get(label).getEdges().size();
			id.remove(Long.toString(nodes.get(label).getIdNum()));		
			nodes.remove(label);
			numNodes--;
			return true;
		}
		return false;
	}
	public boolean delEdge(String source,String destination){
		if(nodes.containsKey(source)&&nodes.containsKey(destination)){
			if(nodes.get(source).getEdges().containsKey(destination)){
				nodes.get(source).getEdges().remove(destination);
				nodes.get(destination).decrementInEdges();
				numEdges--;
				return true;
				
			}
		}
		return false;
	}
	public long numNodes() {
		return numNodes;
	}
	@Override
	public long numEdges() {
		return numEdges;
	}
	@Override
	public String[] topoSort() {
		Queue<Node> queue=new LinkedList<Node>();
		String[] ans= new String[(int) numNodes];
		int count=0;
		for(Node n:nodes.values()){
			if(n.getInEdges()==0){
				queue.add(n);
			}
		}
		while(!queue.isEmpty()){
			Node hold=queue.remove();
			ans[count]=hold.getName();
			delNode(hold.getName());
			count++;
			for(Edge e:hold.getEdges().values()){
				if(nodes.get(e.getDestination()).getInEdges()==0){
					queue.add(nodes.get(e.getDestination()));
				}
			}
		}
		if(count!=ans.length){
			return null;
		}
		return ans;
	}
}